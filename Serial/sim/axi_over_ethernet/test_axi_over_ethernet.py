import os
import random
import sys
import time

import cocotb
from cocotb.triggers import Timer, ReadOnly, ReadWrite, ClockCycles, RisingEdge, FallingEdge
from cocotb.clock import Clock

lib_path = "../.."
sys.path.insert(0, lib_path)
lib_path = "../../../Ethernet/sim"
sys.path.insert(0, lib_path)
from rsp import RSP
import convert_8b10b


@cocotb.coroutine
async def reset(dut):
    await RisingEdge(dut.clk)
    dut.reset.value = 1
    await ClockCycles(dut.clk, 5)
    dut.reset.value = 0
    print("DUT reset")

@cocotb.coroutine
async def serdes_driver(dut, symbols):
    for sym in symbols:
        dut.serdes_rx_data.value = sym
        await RisingEdge(dut.serdes_rx_clk)

@cocotb.coroutine
async def send_frame(dut, frame):
    for b in frame[:-1]:
        dut.valid_in.value = 1
        while dut.pause_in.value:
            await RisingEdge(dut.clk)
        dut.data_in.value = b
        await RisingEdge(dut.clk)

    dut.valid_in.value = 1
    while dut.pause_in.value:
        await RisingEdge(dut.clk)
    dut.eof_in.value = 1
    dut.data_in.value = frame[-1]
    await RisingEdge(dut.clk)
    dut.valid_in.value = 0
    dut.eof_in.value = 0


@cocotb.test()
async def rx_test(dut):
    seed = 12345 #int(time.time())
    random.seed(seed)
    print(f"using seed: {seed}")

    cocotb.start_soon(Clock(dut.clk, 8000, units="ps").start())
    await Timer(2.5, units="ns")
    cocotb.start_soon(Clock(dut.serdes_rx_clk, 7950, units="ps").start())
    await reset(dut)

    # write data
    data = [0xbc, 0x50, 0xbc, 0x50, 0xbc, 0x50, 0xbc, 0x50, 0xbc, 0x50, 0xfb]
    ctrl = [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1]
    data.extend([0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0xD5])
    ctrl.extend([0, 0, 0, 0, 0, 0, 0, 0])
    data.extend([0x00, 0x07, 0xed, 0x12, 0x34, 0x56, 0x12, 0x34, 0x56, 0xab, 0xcd, 0xef, 0x88, 0xb5, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x40, 0xf5, 0x2d, 0x1e, 0x81, 0xc9, 0x33, 0x8d, 0xa3, 0xe8, 0x9b, 0xcc, 0x4e, 0x74, 0xbf, 0xe2, 0x04, 0x13, 0x97, 0x07, 0xf5, 0xc2, 0xbe, 0x75, 0x1e, 0x33, 0x14, 0xaf, 0x84, 0x99, 0x36, 0xa0, 0xf8, 0xbc, 0xb1, 0x4b, 0x13, 0x64, 0x28, 0xb3, 0x1b, 0xed, 0xcc, 0x43, 0x27, 0x1f, 0x1c, 0x29, 0x6d, 0x35, 0x73, 0x40, 0x84, 0xa3, 0x50, 0x42, 0x74, 0x61, 0x31, 0x1b, 0x24, 0x3f, 0xa7, 0x03, 0x62, 0xdf, 0x88, 0xc3, 0x06])
    ctrl.extend([0] * (len(data) - len(ctrl)))
    data.extend([0xfd, 0xf7, 0xf7, 0xbc, 0x50, 0xbc, 0x50, 0xbc, 0x50])
    ctrl.extend([1, 1, 1, 1, 0, 1, 0, 1, 0])

    # read data
    data.extend([0xbc, 0x50, 0xbc, 0x50, 0xbc, 0x50, 0xbc, 0x50, 0xbc, 0x50, 0xfb])
    ctrl.extend([1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1])
    data.extend([0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0xD5])
    ctrl.extend([0, 0, 0, 0, 0, 0, 0, 0])
    data.extend([0x00, 0x07, 0xed, 0x12, 0x34, 0x56, 0x12, 0x34, 0x56, 0xab, 0xcd, 0xef, 0x88, 0xb5, 0x20, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x47, 0x38, 0x05])
    ctrl.extend([0] * (len(data) - len(ctrl)))
    data.extend([0xfd, 0xf7, 0xf7, 0xbc, 0x50, 0xbc, 0x50, 0xbc, 0x50])
    ctrl.extend([1, 1, 1, 1, 0, 1, 0, 1, 0])


    code_groups = convert_8b10b.encode(data, ctrl)
    
    cocotb.start_soon(serdes_driver(dut,code_groups))

    await ClockCycles(dut.clk, 500)



#@cocotb.test()
async def tx_test(dut):
    seed = 12345 #int(time.time())
    random.seed(seed)
    print(f"using seed: {seed}")

    cocotb.start_soon(Clock(dut.clk, 8, units="ns").start())
    await reset(dut)

    await ClockCycles(dut.clk, 7)

    await send_frame(dut, random.randbytes(64))
    await send_frame(dut, random.randbytes(64))

    await ClockCycles(dut.clk, 20)


#@cocotb.test()
async def autoneg_test(dut):
    seed = 12345 #int(time.time())
    random.seed(seed)
    print(f"using seed: {seed}")

    cocotb.start_soon(Clock(dut.clk, 8, units="ns").start())
    await reset(dut)

    symbols = [0x0fa, 0x2aa, 0x18b, 0x18b, 0x305, 0x2d5, 0x18b, 0x18b, 0x305, 0x2aa, 0x274, 0x274, 0x0fa, 0x125, 0x274, 0x274, 0x0fa, 0x2aa, 0x18b, 0x18b, 0x305, 0x2d5, 0x18b, 0x18b, 0x305, 0x2aa, 0x274, 0x274]
    cocotb.start_soon(serdes_emulator(dut,symbols))
    await ClockCycles(dut.clk, 100)


block = RSP(print_packet=True)
block.write_data(0xd, random.randbytes(64))
block.read_data(0xd, 64)